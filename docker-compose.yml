version: '3.7'

volumes:
  kong_data: {}
  esdata: {}

networks:
  kong-net:
    external: true

services:
  kong-migrations:
    image: "kong:alpine"
    command: kong migrations bootstrap
    depends_on:
      - db
    environment:
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: kong
      KONG_PG_HOST: db
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
    networks:
      - kong-net
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure

  kong-migrations-up:
    image: "kong:alpine"
    command: kong migrations up && kong migrations finish
    depends_on:
      - db
    environment:
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: kong
      KONG_PG_HOST: db
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
    networks:
      - kong-net
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure

  kong:
    image: "kong:alpine"
    volumes:
      - ./tenant-id/go-tenant-id:/usr/local/kong/go-tenant-id
      - ./tenant-count-requests/go-tenant-count-requests:/usr/local/kong/go-tenant-count-requests
    depends_on:
      - db
    environment:
      - KONG_DATABASE= postgres
      - KONG_PG_DATABASE= kong
      - KONG_PG_HOST= db
      - KONG_PG_USER= kong
      - KONG_PG_PASSWORD= kong
      - KONG_CASSANDRA_CONTACT_POINTS= db
      - KONG_PLUGINS=bundled, go-tenant-id, go-tenant-count-requests
      - KONG_PLUGINSERVER_NAMES= go-tenant-id, go-tenant-count-requests
      - KONG_PLUGINSERVER_GO_TENANT_ID_SOCKET= /usr/local/kong/go-tenant-id.socket
      - KONG_PLUGINSERVER_GO_TENANT_ID_START_CMD= /usr/local/kong/go-tenant-id
      - KONG_PLUGINSERVER_GO_TENANT_ID_QUERY_CMD= /usr/local/kong/go-tenant-id --dump
      - KONG_PLUGINSERVER_GO_TENANT_COUNT_REQUESTS_SOCKET= /usr/local/kong/go-tenant-count-requests.socket
      - KONG_PLUGINSERVER_GO_TENANT_COUNT_REQUESTS_START_CMD= /usr/local/kong/go-tenant-count-requests
      - KONG_PLUGINSERVER_GO_TENANT_COUNT_REQUESTS_QUERY_CMD= /usr/local/kong/go-tenant-count-requests --dump
      - KONG_PROXY_ACCESS_LOG= /dev/stdout
      - KONG_PROXY_ERROR_LOG= /dev/stderr
      - KONG_ADMIN_ACCESS_LOG= /dev/stdout
      - KONG_ADMIN_ERROR_LOG= /dev/stderr
      - KONG_ADMIN_LISTEN= 0.0.0.0:8001, 0.0.0.0:8044 ssl
    networks:
      - kong-net
    ports:
      - "8000:8000/tcp"
      - "127.0.0.1:8001:8001/tcp"
      - "8443:8443/tcp"
      - "127.0.0.1:8444:8444/tcp"
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure

  db:
    image: postgres:9.5
    environment:
      POSTGRES_DB: kong
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: kong
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 30s
      timeout: 30s
      retries: 3
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure
    stdin_open: true
    tty: true
    networks:
      - kong-net
    volumes:
      - kong_data:/var/lib/postgresql/data

  konga-prepare:
    container_name: konga-prepare
    image: hanlyjiang/pantsel-konga:0.14.4
    command: "-c prepare -a postgres -u postgresql://kong:kong@db:5432/konga_db"
    networks:
      - kong-net
    restart: on-failure
    depends_on:
      - db

  konga:
    container_name: konga
    image: hanlyjiang/pantsel-konga:0.14.4
    restart: always
    networks:
      - kong-net
    environment:
      DB_ADAPTER: postgres
      DB_HOST: db
      DB_USER: kong
      DB_PASSWORD: kong
      TOKEN_SECRET: ahfdjgjgf79JKLFHJKh978953kgdfjkl
      DB_DATABASE: konga_db
      NODE_ENV: production
    depends_on:
      - db
    ports:
      - "1337:1337"

  elasticsearch:
    container_name: elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:7.15.2
    restart: always
    environment:
      - "discovery.type=single-node"
      - "ES_JAVA_OPTS=-Xms1024m -Xmx1024m"
    ports:
      - "9200:9200"
    networks:
      - kong-net
    volumes:
      - esdata:/usr/share/elasticsearch/data:rw

  kibana:
    container_name: kibana
    image: docker.elastic.co/kibana/kibana:7.15.2
    restart: on-failure
    environment:
      elasticsearch.hosts: '["http://elasticsearch:9200"]'
    ports:
      - "5601:5601"
    networks:
      - kong-net

  fluentbit:
    build: ./fluentbit
    container_name: fluentbit
    ports:
      - "24224:24224"
      - "24224:24224/udp"
    depends_on:
      - elasticsearch
    networks:
      - kong-net

  apm-server:
    image: docker.elastic.co/apm/apm-server:7.15.2
    container_name: apm-server
    environment:
      strict.perms: false
      output.elastic.hosts: '[elasticsearch:9200]'
    ports:
      - "8200:8200"
    depends_on:
      - elasticsearch
    networks:
      - kong-net